// Code generated by protoc-gen-go-gins. DO NOT EDIT.
// versions:
// - protoc-gen-go-gins v1.0.0
// - protoc             v5.27.2
// source: helloworld/helloworld.proto

package helloworld

import (
	"context"

	"github.com/gin-gonic/gin"
	"github.com/go-kratos/kratos/v2/transport/http/binding"

	"github.com/origadmin/toolkits/runtime/kratos/transport/gins"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = new(gin.H)
var _ = binding.EncodeURL

const _ = gins.SupportPackageIsVersion1

const Greeter_SayHello_OperationName = "/helloworld.Greeter/SayHello"

type GreeterGINServer interface {
	// SayHello Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterGINServer(router gin.IRouter, srv GreeterGINServer) {
	router.POST("/say_hello", _Greeter_SayHello0_GIN_Handler(srv))
	router.GET("/helloworld/:name", _Greeter_SayHello1_GIN_Handler(srv))
}

func _Greeter_SayHello0_GIN_Handler(srv GreeterGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in HelloRequest
		if err := gins.BindBody(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		gins.SetOperation(ctx, Greeter_SayHello_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.SayHello(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

func _Greeter_SayHello1_GIN_Handler(srv GreeterGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in HelloRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		gins.SetOperation(ctx, Greeter_SayHello_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.SayHello(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

type GreeterGINClient interface {
	SayHello(ctx context.Context, req *HelloRequest, opts ...gins.CallOption) (rsp *HelloReply, err error)
}

type GreeterGINClientImpl struct {
	cc *gins.Client
}

func NewGreeterGINClient(client *gins.Client) GreeterGINClient {
	return &GreeterGINClientImpl{client}
}

func (c *GreeterGINClientImpl) SayHello(ctx context.Context, in *HelloRequest, opts ...gins.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/helloworld/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(Greeter_SayHello_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
