// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: runtime/config/config.proto

package config

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Consul with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Consul) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Consul with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConsulMultiError, or nil if none found.
func (m *Consul) ValidateAll() error {
	return m.validate(true)
}

func (m *Consul) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Scheme

	// no validation rules for Token

	if len(errors) > 0 {
		return ConsulMultiError(errors)
	}

	return nil
}

// ConsulMultiError is an error wrapping multiple validation errors returned by
// Consul.ValidateAll() if the designated constraints aren't met.
type ConsulMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsulMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsulMultiError) AllErrors() []error { return m }

// ConsulValidationError is the validation error returned by Consul.Validate if
// the designated constraints aren't met.
type ConsulValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsulValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsulValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsulValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsulValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsulValidationError) ErrorName() string { return "ConsulValidationError" }

// Error satisfies the builtin error interface
func (e ConsulValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsul.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsulValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsulValidationError{}

// Validate checks the field values on DiscoveryConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiscoveryConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoveryConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoveryConfigMultiError, or nil if none found.
func (m *DiscoveryConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoveryConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _DiscoveryConfig_Type_InLookup[m.GetType()]; !ok {
		err := DiscoveryConfigValidationError{
			field:  "Type",
			reason: "value must be in list [none consul etcd nacos apollo kubernetes polaris]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if m.Consul != nil {

		if all {
			switch v := interface{}(m.GetConsul()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscoveryConfigValidationError{
						field:  "Consul",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscoveryConfigValidationError{
						field:  "Consul",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConsul()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscoveryConfigValidationError{
					field:  "Consul",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiscoveryConfigMultiError(errors)
	}

	return nil
}

// DiscoveryConfigMultiError is an error wrapping multiple validation errors
// returned by DiscoveryConfig.ValidateAll() if the designated constraints
// aren't met.
type DiscoveryConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoveryConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoveryConfigMultiError) AllErrors() []error { return m }

// DiscoveryConfigValidationError is the validation error returned by
// DiscoveryConfig.Validate if the designated constraints aren't met.
type DiscoveryConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryConfigValidationError) ErrorName() string { return "DiscoveryConfigValidationError" }

// Error satisfies the builtin error interface
func (e DiscoveryConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryConfigValidationError{}

var _DiscoveryConfig_Type_InLookup = map[string]struct{}{
	"none":       {},
	"consul":     {},
	"etcd":       {},
	"nacos":      {},
	"apollo":     {},
	"kubernetes": {},
	"polaris":    {},
}
