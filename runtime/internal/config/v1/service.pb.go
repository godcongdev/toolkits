// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: config/v1/service.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntrySelectorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global  bool   `protobuf:"varint,2,opt,name=global,proto3" json:"global,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *EntrySelectorConfig) Reset() {
	*x = EntrySelectorConfig{}
	mi := &file_config_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntrySelectorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrySelectorConfig) ProtoMessage() {}

func (x *EntrySelectorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrySelectorConfig.ProtoReflect.Descriptor instead.
func (*EntrySelectorConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *EntrySelectorConfig) GetGlobal() bool {
	if x != nil {
		return x.Global
	}
	return false
}

func (x *EntrySelectorConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntrySelectorConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type MessageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mqtt     *MessageConfig_MQTT     `protobuf:"bytes,3,opt,name=mqtt,proto3" json:"mqtt,omitempty"`
	Kafka    *MessageConfig_Kafka    `protobuf:"bytes,4,opt,name=kafka,proto3" json:"kafka,omitempty"`
	Rabbitmq *MessageConfig_RabbitMQ `protobuf:"bytes,5,opt,name=rabbitmq,proto3" json:"rabbitmq,omitempty"`
	Activemq *MessageConfig_ActiveMQ `protobuf:"bytes,6,opt,name=activemq,proto3" json:"activemq,omitempty"`
	Nats     *MessageConfig_NATS     `protobuf:"bytes,7,opt,name=nats,proto3" json:"nats,omitempty"`
	Nsq      *MessageConfig_NSQ      `protobuf:"bytes,8,opt,name=nsq,proto3" json:"nsq,omitempty"`
	Pulsar   *MessageConfig_Pulsar   `protobuf:"bytes,9,opt,name=pulsar,proto3" json:"pulsar,omitempty"`
	Redis    *MessageConfig_Redis    `protobuf:"bytes,10,opt,name=redis,proto3" json:"redis,omitempty"`
	Rocketmq *MessageConfig_RocketMQ `protobuf:"bytes,11,opt,name=rocketmq,proto3" json:"rocketmq,omitempty"`
}

func (x *MessageConfig) Reset() {
	*x = MessageConfig{}
	mi := &file_config_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageConfig) ProtoMessage() {}

func (x *MessageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageConfig.ProtoReflect.Descriptor instead.
func (*MessageConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *MessageConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageConfig) GetMqtt() *MessageConfig_MQTT {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

func (x *MessageConfig) GetKafka() *MessageConfig_Kafka {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *MessageConfig) GetRabbitmq() *MessageConfig_RabbitMQ {
	if x != nil {
		return x.Rabbitmq
	}
	return nil
}

func (x *MessageConfig) GetActivemq() *MessageConfig_ActiveMQ {
	if x != nil {
		return x.Activemq
	}
	return nil
}

func (x *MessageConfig) GetNats() *MessageConfig_NATS {
	if x != nil {
		return x.Nats
	}
	return nil
}

func (x *MessageConfig) GetNsq() *MessageConfig_NSQ {
	if x != nil {
		return x.Nsq
	}
	return nil
}

func (x *MessageConfig) GetPulsar() *MessageConfig_Pulsar {
	if x != nil {
		return x.Pulsar
	}
	return nil
}

func (x *MessageConfig) GetRedis() *MessageConfig_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *MessageConfig) GetRocketmq() *MessageConfig_RocketMQ {
	if x != nil {
		return x.Rocketmq
	}
	return nil
}

type TaskConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Asynq     *TaskConfig_Asynq     `protobuf:"bytes,3,opt,name=asynq,proto3" json:"asynq,omitempty"`
	Machinery *TaskConfig_Machinery `protobuf:"bytes,4,opt,name=machinery,proto3" json:"machinery,omitempty"`
	Cron      *TaskConfig_Cron      `protobuf:"bytes,5,opt,name=cron,proto3" json:"cron,omitempty"`
}

func (x *TaskConfig) Reset() {
	*x = TaskConfig{}
	mi := &file_config_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfig) ProtoMessage() {}

func (x *TaskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfig.ProtoReflect.Descriptor instead.
func (*TaskConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *TaskConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskConfig) GetAsynq() *TaskConfig_Asynq {
	if x != nil {
		return x.Asynq
	}
	return nil
}

func (x *TaskConfig) GetMachinery() *TaskConfig_Machinery {
	if x != nil {
		return x.Machinery
	}
	return nil
}

func (x *TaskConfig) GetCron() *TaskConfig_Cron {
	if x != nil {
		return x.Cron
	}
	return nil
}

type ServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry     *ServiceConfig_Entry     `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	Gins      *ServiceConfig_GINS      `protobuf:"bytes,2,opt,name=gins,proto3" json:"gins,omitempty"`
	Http      *ServiceConfig_HTTP      `protobuf:"bytes,3,opt,name=http,proto3" json:"http,omitempty"`
	Grpc      *ServiceConfig_GRPC      `protobuf:"bytes,4,opt,name=grpc,proto3" json:"grpc,omitempty"`
	Websocket *ServiceConfig_Websocket `protobuf:"bytes,5,opt,name=websocket,proto3" json:"websocket,omitempty"`
	Message   *MessageConfig           `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
	Task      *TaskConfig              `protobuf:"bytes,20,opt,name=task,proto3" json:"task,omitempty"`
	Host      string                   `protobuf:"bytes,99,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *ServiceConfig) Reset() {
	*x = ServiceConfig{}
	mi := &file_config_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig) ProtoMessage() {}

func (x *ServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig.ProtoReflect.Descriptor instead.
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceConfig) GetEntry() *ServiceConfig_Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *ServiceConfig) GetGins() *ServiceConfig_GINS {
	if x != nil {
		return x.Gins
	}
	return nil
}

func (x *ServiceConfig) GetHttp() *ServiceConfig_HTTP {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *ServiceConfig) GetGrpc() *ServiceConfig_GRPC {
	if x != nil {
		return x.Grpc
	}
	return nil
}

func (x *ServiceConfig) GetWebsocket() *ServiceConfig_Websocket {
	if x != nil {
		return x.Websocket
	}
	return nil
}

func (x *ServiceConfig) GetMessage() *MessageConfig {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ServiceConfig) GetTask() *TaskConfig {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *ServiceConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// MQTT
type MessageConfig_MQTT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // Peer network address
	Codec    string `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // Codec: json,xml,yaml...
}

func (x *MessageConfig_MQTT) Reset() {
	*x = MessageConfig_MQTT{}
	mi := &file_config_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageConfig_MQTT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageConfig_MQTT) ProtoMessage() {}

func (x *MessageConfig_MQTT) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageConfig_MQTT.ProtoReflect.Descriptor instead.
func (*MessageConfig_MQTT) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MessageConfig_MQTT) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *MessageConfig_MQTT) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

// Kafka
type MessageConfig_Kafka struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // Peer network address
	Codec    string `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // Codec: json,xml,yaml...
}

func (x *MessageConfig_Kafka) Reset() {
	*x = MessageConfig_Kafka{}
	mi := &file_config_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageConfig_Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageConfig_Kafka) ProtoMessage() {}

func (x *MessageConfig_Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageConfig_Kafka.ProtoReflect.Descriptor instead.
func (*MessageConfig_Kafka) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *MessageConfig_Kafka) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *MessageConfig_Kafka) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

// RabbitMQ
type MessageConfig_RabbitMQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // Peer network address
	Codec    string `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // Codec: json,xml,yaml...
}

func (x *MessageConfig_RabbitMQ) Reset() {
	*x = MessageConfig_RabbitMQ{}
	mi := &file_config_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageConfig_RabbitMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageConfig_RabbitMQ) ProtoMessage() {}

func (x *MessageConfig_RabbitMQ) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageConfig_RabbitMQ.ProtoReflect.Descriptor instead.
func (*MessageConfig_RabbitMQ) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{1, 2}
}

func (x *MessageConfig_RabbitMQ) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *MessageConfig_RabbitMQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type MessageConfig_ActiveMQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // Peer network address
	Codec    string `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // Codec: json,xml,yaml...
}

func (x *MessageConfig_ActiveMQ) Reset() {
	*x = MessageConfig_ActiveMQ{}
	mi := &file_config_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageConfig_ActiveMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageConfig_ActiveMQ) ProtoMessage() {}

func (x *MessageConfig_ActiveMQ) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageConfig_ActiveMQ.ProtoReflect.Descriptor instead.
func (*MessageConfig_ActiveMQ) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{1, 3}
}

func (x *MessageConfig_ActiveMQ) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *MessageConfig_ActiveMQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type MessageConfig_NATS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // Peer network address
	Codec    string `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // Codec: json,xml,yaml...
}

func (x *MessageConfig_NATS) Reset() {
	*x = MessageConfig_NATS{}
	mi := &file_config_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageConfig_NATS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageConfig_NATS) ProtoMessage() {}

func (x *MessageConfig_NATS) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageConfig_NATS.ProtoReflect.Descriptor instead.
func (*MessageConfig_NATS) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{1, 4}
}

func (x *MessageConfig_NATS) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *MessageConfig_NATS) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type MessageConfig_NSQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // Peer network address
	Codec    string `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // Codec: json,xml,yaml...
}

func (x *MessageConfig_NSQ) Reset() {
	*x = MessageConfig_NSQ{}
	mi := &file_config_v1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageConfig_NSQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageConfig_NSQ) ProtoMessage() {}

func (x *MessageConfig_NSQ) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageConfig_NSQ.ProtoReflect.Descriptor instead.
func (*MessageConfig_NSQ) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{1, 5}
}

func (x *MessageConfig_NSQ) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *MessageConfig_NSQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type MessageConfig_Pulsar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // Peer network address
	Codec    string `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // Codec: json,xml,yaml...
}

func (x *MessageConfig_Pulsar) Reset() {
	*x = MessageConfig_Pulsar{}
	mi := &file_config_v1_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageConfig_Pulsar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageConfig_Pulsar) ProtoMessage() {}

func (x *MessageConfig_Pulsar) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageConfig_Pulsar.ProtoReflect.Descriptor instead.
func (*MessageConfig_Pulsar) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{1, 6}
}

func (x *MessageConfig_Pulsar) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *MessageConfig_Pulsar) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type MessageConfig_Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // Peer network address
	Codec    string `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // Codec: json,xml,yaml...
}

func (x *MessageConfig_Redis) Reset() {
	*x = MessageConfig_Redis{}
	mi := &file_config_v1_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageConfig_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageConfig_Redis) ProtoMessage() {}

func (x *MessageConfig_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageConfig_Redis.ProtoReflect.Descriptor instead.
func (*MessageConfig_Redis) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{1, 7}
}

func (x *MessageConfig_Redis) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *MessageConfig_Redis) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type MessageConfig_RocketMQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint         string   `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // Peer network address
	Codec            string   `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // Codec: json,xml,yaml...
	EnableTrace      bool     `protobuf:"varint,3,opt,name=enable_trace,proto3" json:"enable_trace,omitempty"`
	NameServers      []string `protobuf:"bytes,4,rep,name=name_servers,proto3" json:"name_servers,omitempty"`
	NameServerDomain string   `protobuf:"bytes,5,opt,name=name_server_domain,proto3" json:"name_server_domain,omitempty"`
	AccessKey        string   `protobuf:"bytes,6,opt,name=access_key,proto3" json:"access_key,omitempty"`
	SecretKey        string   `protobuf:"bytes,7,opt,name=secret_key,proto3" json:"secret_key,omitempty"`
	SecurityToken    string   `protobuf:"bytes,8,opt,name=security_token,proto3" json:"security_token,omitempty"`
	Namespace        string   `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	InstanceName     string   `protobuf:"bytes,10,opt,name=instance_name,proto3" json:"instance_name,omitempty"`
	GroupName        string   `protobuf:"bytes,11,opt,name=group_name,proto3" json:"group_name,omitempty"`
}

func (x *MessageConfig_RocketMQ) Reset() {
	*x = MessageConfig_RocketMQ{}
	mi := &file_config_v1_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageConfig_RocketMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageConfig_RocketMQ) ProtoMessage() {}

func (x *MessageConfig_RocketMQ) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageConfig_RocketMQ.ProtoReflect.Descriptor instead.
func (*MessageConfig_RocketMQ) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{1, 8}
}

func (x *MessageConfig_RocketMQ) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *MessageConfig_RocketMQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *MessageConfig_RocketMQ) GetEnableTrace() bool {
	if x != nil {
		return x.EnableTrace
	}
	return false
}

func (x *MessageConfig_RocketMQ) GetNameServers() []string {
	if x != nil {
		return x.NameServers
	}
	return nil
}

func (x *MessageConfig_RocketMQ) GetNameServerDomain() string {
	if x != nil {
		return x.NameServerDomain
	}
	return ""
}

func (x *MessageConfig_RocketMQ) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *MessageConfig_RocketMQ) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *MessageConfig_RocketMQ) GetSecurityToken() string {
	if x != nil {
		return x.SecurityToken
	}
	return ""
}

func (x *MessageConfig_RocketMQ) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *MessageConfig_RocketMQ) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *MessageConfig_RocketMQ) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

// Asynq
type TaskConfig_Asynq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // Peer network address
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // redis Login password
	Db       int32  `protobuf:"varint,3,opt,name=db,proto3" json:"db,omitempty"`            // Database index
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"` // Time Zone
}

func (x *TaskConfig_Asynq) Reset() {
	*x = TaskConfig_Asynq{}
	mi := &file_config_v1_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskConfig_Asynq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfig_Asynq) ProtoMessage() {}

func (x *TaskConfig_Asynq) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfig_Asynq.ProtoReflect.Descriptor instead.
func (*TaskConfig_Asynq) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TaskConfig_Asynq) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *TaskConfig_Asynq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TaskConfig_Asynq) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *TaskConfig_Asynq) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// Machinery
type TaskConfig_Machinery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brokers  []string `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty"`   // broker address, which can be specified as Redis, AMQP, or AWS SQS according to the actual storage medium used;
	Backends []string `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"` // backend configures the media for storing results. The value can be Redis, memcached, or mongodb as required.  }
}

func (x *TaskConfig_Machinery) Reset() {
	*x = TaskConfig_Machinery{}
	mi := &file_config_v1_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskConfig_Machinery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfig_Machinery) ProtoMessage() {}

func (x *TaskConfig_Machinery) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfig_Machinery.ProtoReflect.Descriptor instead.
func (*TaskConfig_Machinery) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{2, 1}
}

func (x *TaskConfig_Machinery) GetBrokers() []string {
	if x != nil {
		return x.Brokers
	}
	return nil
}

func (x *TaskConfig_Machinery) GetBackends() []string {
	if x != nil {
		return x.Backends
	}
	return nil
}

// Cron
type TaskConfig_Cron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // Peer network address
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // redis Login password
	Db       int32  `protobuf:"varint,3,opt,name=db,proto3" json:"db,omitempty"`            // Database index
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"` // Time Zone
}

func (x *TaskConfig_Cron) Reset() {
	*x = TaskConfig_Cron{}
	mi := &file_config_v1_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskConfig_Cron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfig_Cron) ProtoMessage() {}

func (x *TaskConfig_Cron) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfig_Cron.ProtoReflect.Descriptor instead.
func (*TaskConfig_Cron) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{2, 2}
}

func (x *TaskConfig_Cron) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *TaskConfig_Cron) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TaskConfig_Cron) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *TaskConfig_Cron) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// Entry
type ServiceConfig_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Addr          string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Network       string               `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Weight        string               `protobuf:"bytes,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Timeout       *durationpb.Duration `protobuf:"bytes,5,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	EnableSwagger bool                 `protobuf:"varint,6,opt,name=enable_swagger,proto3" json:"enable_swagger,omitempty"`
	EnablePprof   bool                 `protobuf:"varint,7,opt,name=enable_pprof,proto3" json:"enable_pprof,omitempty"`
	Selector      *EntrySelectorConfig `protobuf:"bytes,8,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *ServiceConfig_Entry) Reset() {
	*x = ServiceConfig_Entry{}
	mi := &file_config_v1_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Entry) ProtoMessage() {}

func (x *ServiceConfig_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Entry.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Entry) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ServiceConfig_Entry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceConfig_Entry) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ServiceConfig_Entry) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceConfig_Entry) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

func (x *ServiceConfig_Entry) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ServiceConfig_Entry) GetEnableSwagger() bool {
	if x != nil {
		return x.EnableSwagger
	}
	return false
}

func (x *ServiceConfig_Entry) GetEnablePprof() bool {
	if x != nil {
		return x.EnablePprof
	}
	return false
}

func (x *ServiceConfig_Entry) GetSelector() *EntrySelectorConfig {
	if x != nil {
		return x.Selector
	}
	return nil
}

// GINS
type ServiceConfig_GINS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network         string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr            string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	UseTls          bool                 `protobuf:"varint,3,opt,name=use_tls,proto3" json:"use_tls,omitempty"`
	CertFile        string               `protobuf:"bytes,4,opt,name=cert_file,proto3" json:"cert_file,omitempty"`
	KeyFile         string               `protobuf:"bytes,5,opt,name=key_file,proto3" json:"key_file,omitempty"`
	Timeout         *durationpb.Duration `protobuf:"bytes,6,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	ShutdownTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=shutdown_timeout,proto3,oneof" json:"shutdown_timeout,omitempty"`
	ReadTimeout     *durationpb.Duration `protobuf:"bytes,8,opt,name=read_timeout,proto3,oneof" json:"read_timeout,omitempty"`
	WriteTimeout    *durationpb.Duration `protobuf:"bytes,9,opt,name=write_timeout,proto3,oneof" json:"write_timeout,omitempty"`
	IdleTimeout     *durationpb.Duration `protobuf:"bytes,10,opt,name=idle_timeout,proto3,oneof" json:"idle_timeout,omitempty"`
	Endpoint        string               `protobuf:"bytes,11,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *ServiceConfig_GINS) Reset() {
	*x = ServiceConfig_GINS{}
	mi := &file_config_v1_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_GINS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_GINS) ProtoMessage() {}

func (x *ServiceConfig_GINS) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_GINS.ProtoReflect.Descriptor instead.
func (*ServiceConfig_GINS) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ServiceConfig_GINS) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceConfig_GINS) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ServiceConfig_GINS) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *ServiceConfig_GINS) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *ServiceConfig_GINS) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *ServiceConfig_GINS) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ServiceConfig_GINS) GetShutdownTimeout() *durationpb.Duration {
	if x != nil {
		return x.ShutdownTimeout
	}
	return nil
}

func (x *ServiceConfig_GINS) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *ServiceConfig_GINS) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *ServiceConfig_GINS) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *ServiceConfig_GINS) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

// HTTP
type ServiceConfig_HTTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network         string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr            string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	UseTls          bool                 `protobuf:"varint,3,opt,name=use_tls,proto3" json:"use_tls,omitempty"`
	CertFile        string               `protobuf:"bytes,4,opt,name=cert_file,proto3" json:"cert_file,omitempty"`
	KeyFile         string               `protobuf:"bytes,5,opt,name=key_file,proto3" json:"key_file,omitempty"`
	Timeout         *durationpb.Duration `protobuf:"bytes,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ShutdownTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=shutdown_timeout,proto3" json:"shutdown_timeout,omitempty"`
	ReadTimeout     *durationpb.Duration `protobuf:"bytes,8,opt,name=read_timeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout    *durationpb.Duration `protobuf:"bytes,9,opt,name=write_timeout,proto3" json:"write_timeout,omitempty"`
	IdleTimeout     *durationpb.Duration `protobuf:"bytes,10,opt,name=idle_timeout,proto3" json:"idle_timeout,omitempty"`
	Endpoint        string               `protobuf:"bytes,11,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *ServiceConfig_HTTP) Reset() {
	*x = ServiceConfig_HTTP{}
	mi := &file_config_v1_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_HTTP) ProtoMessage() {}

func (x *ServiceConfig_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_HTTP.ProtoReflect.Descriptor instead.
func (*ServiceConfig_HTTP) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{3, 2}
}

func (x *ServiceConfig_HTTP) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceConfig_HTTP) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ServiceConfig_HTTP) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *ServiceConfig_HTTP) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *ServiceConfig_HTTP) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *ServiceConfig_HTTP) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ServiceConfig_HTTP) GetShutdownTimeout() *durationpb.Duration {
	if x != nil {
		return x.ShutdownTimeout
	}
	return nil
}

func (x *ServiceConfig_HTTP) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *ServiceConfig_HTTP) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *ServiceConfig_HTTP) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *ServiceConfig_HTTP) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

// GRPC
type ServiceConfig_GRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network         string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr            string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	UseTls          bool                 `protobuf:"varint,3,opt,name=use_tls,proto3" json:"use_tls,omitempty"`
	CertFile        string               `protobuf:"bytes,4,opt,name=cert_file,proto3" json:"cert_file,omitempty"`
	KeyFile         string               `protobuf:"bytes,5,opt,name=key_file,proto3" json:"key_file,omitempty"`
	Timeout         *durationpb.Duration `protobuf:"bytes,6,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	ShutdownTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=shutdown_timeout,proto3,oneof" json:"shutdown_timeout,omitempty"`
	ReadTimeout     *durationpb.Duration `protobuf:"bytes,8,opt,name=read_timeout,proto3,oneof" json:"read_timeout,omitempty"`
	WriteTimeout    *durationpb.Duration `protobuf:"bytes,9,opt,name=write_timeout,proto3,oneof" json:"write_timeout,omitempty"`
	IdleTimeout     *durationpb.Duration `protobuf:"bytes,10,opt,name=idle_timeout,proto3,oneof" json:"idle_timeout,omitempty"`
	Endpoint        string               `protobuf:"bytes,11,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *ServiceConfig_GRPC) Reset() {
	*x = ServiceConfig_GRPC{}
	mi := &file_config_v1_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_GRPC) ProtoMessage() {}

func (x *ServiceConfig_GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_GRPC.ProtoReflect.Descriptor instead.
func (*ServiceConfig_GRPC) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{3, 3}
}

func (x *ServiceConfig_GRPC) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceConfig_GRPC) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ServiceConfig_GRPC) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *ServiceConfig_GRPC) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *ServiceConfig_GRPC) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *ServiceConfig_GRPC) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ServiceConfig_GRPC) GetShutdownTimeout() *durationpb.Duration {
	if x != nil {
		return x.ShutdownTimeout
	}
	return nil
}

func (x *ServiceConfig_GRPC) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *ServiceConfig_GRPC) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *ServiceConfig_GRPC) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *ServiceConfig_GRPC) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

// Websocket
type ServiceConfig_Websocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr    string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Path    string               `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Codec   string               `protobuf:"bytes,4,opt,name=codec,proto3" json:"codec,omitempty"`
	Timeout *durationpb.Duration `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ServiceConfig_Websocket) Reset() {
	*x = ServiceConfig_Websocket{}
	mi := &file_config_v1_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Websocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Websocket) ProtoMessage() {}

func (x *ServiceConfig_Websocket) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Websocket.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Websocket) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{3, 4}
}

func (x *ServiceConfig_Websocket) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceConfig_Websocket) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ServiceConfig_Websocket) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ServiceConfig_Websocket) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *ServiceConfig_Websocket) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type ServiceConfig_Middleware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cors    *ServiceConfig_Middleware_Cors    `protobuf:"bytes,1,opt,name=cors,proto3" json:"cors,omitempty"`
	Metrics *ServiceConfig_Middleware_Metrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Traces  *ServiceConfig_Middleware_Traces  `protobuf:"bytes,3,opt,name=traces,proto3" json:"traces,omitempty"`
	Logger  *ServiceConfig_Middleware_Logger  `protobuf:"bytes,4,opt,name=logger,proto3" json:"logger,omitempty"`
}

func (x *ServiceConfig_Middleware) Reset() {
	*x = ServiceConfig_Middleware{}
	mi := &file_config_v1_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Middleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Middleware) ProtoMessage() {}

func (x *ServiceConfig_Middleware) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Middleware.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Middleware) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{3, 5}
}

func (x *ServiceConfig_Middleware) GetCors() *ServiceConfig_Middleware_Cors {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *ServiceConfig_Middleware) GetMetrics() *ServiceConfig_Middleware_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ServiceConfig_Middleware) GetTraces() *ServiceConfig_Middleware_Traces {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *ServiceConfig_Middleware) GetLogger() *ServiceConfig_Middleware_Logger {
	if x != nil {
		return x.Logger
	}
	return nil
}

type ServiceConfig_Middleware_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ServiceConfig_Middleware_Metrics) Reset() {
	*x = ServiceConfig_Middleware_Metrics{}
	mi := &file_config_v1_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Middleware_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Middleware_Metrics) ProtoMessage() {}

func (x *ServiceConfig_Middleware_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Middleware_Metrics.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Middleware_Metrics) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{3, 5, 0}
}

func (x *ServiceConfig_Middleware_Metrics) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ServiceConfig_Middleware_Traces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ServiceConfig_Middleware_Traces) Reset() {
	*x = ServiceConfig_Middleware_Traces{}
	mi := &file_config_v1_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Middleware_Traces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Middleware_Traces) ProtoMessage() {}

func (x *ServiceConfig_Middleware_Traces) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Middleware_Traces.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Middleware_Traces) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{3, 5, 1}
}

func (x *ServiceConfig_Middleware_Traces) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ServiceConfig_Middleware_Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ServiceConfig_Middleware_Logger) Reset() {
	*x = ServiceConfig_Middleware_Logger{}
	mi := &file_config_v1_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Middleware_Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Middleware_Logger) ProtoMessage() {}

func (x *ServiceConfig_Middleware_Logger) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Middleware_Logger.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Middleware_Logger) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{3, 5, 2}
}

func (x *ServiceConfig_Middleware_Logger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ServiceConfig_Middleware_Cors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowAllOrigins        bool     `protobuf:"varint,2,opt,name=allow_all_origins,proto3" json:"allow_all_origins,omitempty"`
	AllowOrigins           []string `protobuf:"bytes,3,rep,name=allow_origins,proto3" json:"allow_origins,omitempty"`
	AllowMethods           []string `protobuf:"bytes,4,rep,name=allow_methods,proto3" json:"allow_methods,omitempty"`
	AllowHeaders           []string `protobuf:"bytes,5,rep,name=allow_headers,proto3" json:"allow_headers,omitempty"`
	AllowCredentials       bool     `protobuf:"varint,6,opt,name=allow_credentials,proto3" json:"allow_credentials,omitempty"`
	ExposeHeaders          []string `protobuf:"bytes,7,rep,name=expose_headers,proto3" json:"expose_headers,omitempty"`
	MaxAge                 int32    `protobuf:"varint,8,opt,name=max_age,proto3" json:"max_age,omitempty"`
	AllowWildcard          bool     `protobuf:"varint,9,opt,name=allow_wildcard,proto3" json:"allow_wildcard,omitempty"`
	AllowBrowserExtensions bool     `protobuf:"varint,10,opt,name=allow_browser_extensions,proto3" json:"allow_browser_extensions,omitempty"`
	AllowWebSockets        bool     `protobuf:"varint,11,opt,name=allow_web_sockets,proto3" json:"allow_web_sockets,omitempty"`
	AllowFiles             bool     `protobuf:"varint,12,opt,name=allow_files,proto3" json:"allow_files,omitempty"`
}

func (x *ServiceConfig_Middleware_Cors) Reset() {
	*x = ServiceConfig_Middleware_Cors{}
	mi := &file_config_v1_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Middleware_Cors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Middleware_Cors) ProtoMessage() {}

func (x *ServiceConfig_Middleware_Cors) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Middleware_Cors.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Middleware_Cors) Descriptor() ([]byte, []int) {
	return file_config_v1_service_proto_rawDescGZIP(), []int{3, 5, 3}
}

func (x *ServiceConfig_Middleware_Cors) GetAllowAllOrigins() bool {
	if x != nil {
		return x.AllowAllOrigins
	}
	return false
}

func (x *ServiceConfig_Middleware_Cors) GetAllowOrigins() []string {
	if x != nil {
		return x.AllowOrigins
	}
	return nil
}

func (x *ServiceConfig_Middleware_Cors) GetAllowMethods() []string {
	if x != nil {
		return x.AllowMethods
	}
	return nil
}

func (x *ServiceConfig_Middleware_Cors) GetAllowHeaders() []string {
	if x != nil {
		return x.AllowHeaders
	}
	return nil
}

func (x *ServiceConfig_Middleware_Cors) GetAllowCredentials() bool {
	if x != nil {
		return x.AllowCredentials
	}
	return false
}

func (x *ServiceConfig_Middleware_Cors) GetExposeHeaders() []string {
	if x != nil {
		return x.ExposeHeaders
	}
	return nil
}

func (x *ServiceConfig_Middleware_Cors) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *ServiceConfig_Middleware_Cors) GetAllowWildcard() bool {
	if x != nil {
		return x.AllowWildcard
	}
	return false
}

func (x *ServiceConfig_Middleware_Cors) GetAllowBrowserExtensions() bool {
	if x != nil {
		return x.AllowBrowserExtensions
	}
	return false
}

func (x *ServiceConfig_Middleware_Cors) GetAllowWebSockets() bool {
	if x != nil {
		return x.AllowWebSockets
	}
	return false
}

func (x *ServiceConfig_Middleware_Cors) GetAllowFiles() bool {
	if x != nil {
		return x.AllowFiles
	}
	return false
}

var File_config_v1_service_proto protoreflect.FileDescriptor

var file_config_v1_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xf9, 0x0a, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x51, 0x54, 0x54, 0x52, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x12, 0x3d, 0x0a, 0x08, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x62,
	0x62, 0x69, 0x74, 0x4d, 0x51, 0x52, 0x08, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x12,
	0x3d, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x51, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x12, 0x31,
	0x0a, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x41, 0x54, 0x53, 0x52, 0x04, 0x6e, 0x61, 0x74,
	0x73, 0x12, 0x2e, 0x0a, 0x03, 0x6e, 0x73, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x53, 0x51, 0x52, 0x03, 0x6e, 0x73,
	0x71, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x75, 0x6c, 0x73,
	0x61, 0x72, 0x52, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x12, 0x3d, 0x0a, 0x08, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x71, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x51, 0x52, 0x08, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x71, 0x1a,
	0x38, 0x0a, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x1a, 0x39, 0x0a, 0x05, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x1a, 0x3c, 0x0a, 0x08, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x1a, 0x3c, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x51, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x1a, 0x38, 0x0a, 0x04, 0x4e, 0x41, 0x54, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x1a, 0x37, 0x0a, 0x03, 0x4e, 0x53,
	0x51, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x1a, 0x3a, 0x0a, 0x06, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x1a,
	0x39, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x1a, 0x80, 0x03, 0x0a, 0x08, 0x52,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x51, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xde, 0x03,
	0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x05, 0x61, 0x73, 0x79, 0x6e, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x71, 0x52, 0x05, 0x61, 0x73,
	0x79, 0x6e, 0x71, 0x12, 0x3d, 0x0a, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x72, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x04, 0x63, 0x72,
	0x6f, 0x6e, 0x1a, 0x6b, 0x0a, 0x05, 0x41, 0x73, 0x79, 0x6e, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x64, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x41, 0x0a, 0x09, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x73, 0x1a, 0x6a, 0x0a, 0x04, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x64, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa6,
	0x1a, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x34, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47,
	0x49, 0x4e, 0x53, 0x52, 0x04, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x31, 0x0a, 0x04,
	0x67, 0x72, 0x70, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12,
	0x40, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x1a, 0xaf, 0x02, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x12, 0x3a,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xcd, 0x04, 0x0a, 0x04, 0x47, 0x49, 0x4e, 0x53, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x10, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x01, 0x52, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52,
	0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x04, 0x52, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xdf, 0x03, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3d, 0x0a,
	0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3f, 0x0a, 0x0d,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3d, 0x0a,
	0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xcd, 0x04, 0x0a, 0x04, 0x47, 0x52, 0x50,
	0x43, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,
	0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0c, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x03, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x64, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x98, 0x01, 0x0a, 0x09, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x33,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x1a, 0xc1, 0x06, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x72, 0x73, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73,
	0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x1a,
	0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x1c,
	0x0a, 0x06, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x1c, 0x0a, 0x06,
	0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xca, 0x03, 0x0a, 0x04, 0x43,
	0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x6c,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x97, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa2, 0x02,
	0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_v1_service_proto_rawDescOnce sync.Once
	file_config_v1_service_proto_rawDescData = file_config_v1_service_proto_rawDesc
)

func file_config_v1_service_proto_rawDescGZIP() []byte {
	file_config_v1_service_proto_rawDescOnce.Do(func() {
		file_config_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_v1_service_proto_rawDescData)
	})
	return file_config_v1_service_proto_rawDescData
}

var file_config_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_config_v1_service_proto_goTypes = []any{
	(*EntrySelectorConfig)(nil),              // 0: config.v1.EntrySelectorConfig
	(*MessageConfig)(nil),                    // 1: config.v1.MessageConfig
	(*TaskConfig)(nil),                       // 2: config.v1.TaskConfig
	(*ServiceConfig)(nil),                    // 3: config.v1.ServiceConfig
	(*MessageConfig_MQTT)(nil),               // 4: config.v1.MessageConfig.MQTT
	(*MessageConfig_Kafka)(nil),              // 5: config.v1.MessageConfig.Kafka
	(*MessageConfig_RabbitMQ)(nil),           // 6: config.v1.MessageConfig.RabbitMQ
	(*MessageConfig_ActiveMQ)(nil),           // 7: config.v1.MessageConfig.ActiveMQ
	(*MessageConfig_NATS)(nil),               // 8: config.v1.MessageConfig.NATS
	(*MessageConfig_NSQ)(nil),                // 9: config.v1.MessageConfig.NSQ
	(*MessageConfig_Pulsar)(nil),             // 10: config.v1.MessageConfig.Pulsar
	(*MessageConfig_Redis)(nil),              // 11: config.v1.MessageConfig.Redis
	(*MessageConfig_RocketMQ)(nil),           // 12: config.v1.MessageConfig.RocketMQ
	(*TaskConfig_Asynq)(nil),                 // 13: config.v1.TaskConfig.Asynq
	(*TaskConfig_Machinery)(nil),             // 14: config.v1.TaskConfig.Machinery
	(*TaskConfig_Cron)(nil),                  // 15: config.v1.TaskConfig.Cron
	(*ServiceConfig_Entry)(nil),              // 16: config.v1.ServiceConfig.Entry
	(*ServiceConfig_GINS)(nil),               // 17: config.v1.ServiceConfig.GINS
	(*ServiceConfig_HTTP)(nil),               // 18: config.v1.ServiceConfig.HTTP
	(*ServiceConfig_GRPC)(nil),               // 19: config.v1.ServiceConfig.GRPC
	(*ServiceConfig_Websocket)(nil),          // 20: config.v1.ServiceConfig.Websocket
	(*ServiceConfig_Middleware)(nil),         // 21: config.v1.ServiceConfig.Middleware
	(*ServiceConfig_Middleware_Metrics)(nil), // 22: config.v1.ServiceConfig.Middleware.Metrics
	(*ServiceConfig_Middleware_Traces)(nil),  // 23: config.v1.ServiceConfig.Middleware.Traces
	(*ServiceConfig_Middleware_Logger)(nil),  // 24: config.v1.ServiceConfig.Middleware.Logger
	(*ServiceConfig_Middleware_Cors)(nil),    // 25: config.v1.ServiceConfig.Middleware.Cors
	(*durationpb.Duration)(nil),              // 26: google.protobuf.Duration
}
var file_config_v1_service_proto_depIdxs = []int32{
	4,  // 0: config.v1.MessageConfig.mqtt:type_name -> config.v1.MessageConfig.MQTT
	5,  // 1: config.v1.MessageConfig.kafka:type_name -> config.v1.MessageConfig.Kafka
	6,  // 2: config.v1.MessageConfig.rabbitmq:type_name -> config.v1.MessageConfig.RabbitMQ
	7,  // 3: config.v1.MessageConfig.activemq:type_name -> config.v1.MessageConfig.ActiveMQ
	8,  // 4: config.v1.MessageConfig.nats:type_name -> config.v1.MessageConfig.NATS
	9,  // 5: config.v1.MessageConfig.nsq:type_name -> config.v1.MessageConfig.NSQ
	10, // 6: config.v1.MessageConfig.pulsar:type_name -> config.v1.MessageConfig.Pulsar
	11, // 7: config.v1.MessageConfig.redis:type_name -> config.v1.MessageConfig.Redis
	12, // 8: config.v1.MessageConfig.rocketmq:type_name -> config.v1.MessageConfig.RocketMQ
	13, // 9: config.v1.TaskConfig.asynq:type_name -> config.v1.TaskConfig.Asynq
	14, // 10: config.v1.TaskConfig.machinery:type_name -> config.v1.TaskConfig.Machinery
	15, // 11: config.v1.TaskConfig.cron:type_name -> config.v1.TaskConfig.Cron
	16, // 12: config.v1.ServiceConfig.entry:type_name -> config.v1.ServiceConfig.Entry
	17, // 13: config.v1.ServiceConfig.gins:type_name -> config.v1.ServiceConfig.GINS
	18, // 14: config.v1.ServiceConfig.http:type_name -> config.v1.ServiceConfig.HTTP
	19, // 15: config.v1.ServiceConfig.grpc:type_name -> config.v1.ServiceConfig.GRPC
	20, // 16: config.v1.ServiceConfig.websocket:type_name -> config.v1.ServiceConfig.Websocket
	1,  // 17: config.v1.ServiceConfig.message:type_name -> config.v1.MessageConfig
	2,  // 18: config.v1.ServiceConfig.task:type_name -> config.v1.TaskConfig
	26, // 19: config.v1.ServiceConfig.Entry.timeout:type_name -> google.protobuf.Duration
	0,  // 20: config.v1.ServiceConfig.Entry.selector:type_name -> config.v1.EntrySelectorConfig
	26, // 21: config.v1.ServiceConfig.GINS.timeout:type_name -> google.protobuf.Duration
	26, // 22: config.v1.ServiceConfig.GINS.shutdown_timeout:type_name -> google.protobuf.Duration
	26, // 23: config.v1.ServiceConfig.GINS.read_timeout:type_name -> google.protobuf.Duration
	26, // 24: config.v1.ServiceConfig.GINS.write_timeout:type_name -> google.protobuf.Duration
	26, // 25: config.v1.ServiceConfig.GINS.idle_timeout:type_name -> google.protobuf.Duration
	26, // 26: config.v1.ServiceConfig.HTTP.timeout:type_name -> google.protobuf.Duration
	26, // 27: config.v1.ServiceConfig.HTTP.shutdown_timeout:type_name -> google.protobuf.Duration
	26, // 28: config.v1.ServiceConfig.HTTP.read_timeout:type_name -> google.protobuf.Duration
	26, // 29: config.v1.ServiceConfig.HTTP.write_timeout:type_name -> google.protobuf.Duration
	26, // 30: config.v1.ServiceConfig.HTTP.idle_timeout:type_name -> google.protobuf.Duration
	26, // 31: config.v1.ServiceConfig.GRPC.timeout:type_name -> google.protobuf.Duration
	26, // 32: config.v1.ServiceConfig.GRPC.shutdown_timeout:type_name -> google.protobuf.Duration
	26, // 33: config.v1.ServiceConfig.GRPC.read_timeout:type_name -> google.protobuf.Duration
	26, // 34: config.v1.ServiceConfig.GRPC.write_timeout:type_name -> google.protobuf.Duration
	26, // 35: config.v1.ServiceConfig.GRPC.idle_timeout:type_name -> google.protobuf.Duration
	26, // 36: config.v1.ServiceConfig.Websocket.timeout:type_name -> google.protobuf.Duration
	25, // 37: config.v1.ServiceConfig.Middleware.cors:type_name -> config.v1.ServiceConfig.Middleware.Cors
	22, // 38: config.v1.ServiceConfig.Middleware.metrics:type_name -> config.v1.ServiceConfig.Middleware.Metrics
	23, // 39: config.v1.ServiceConfig.Middleware.traces:type_name -> config.v1.ServiceConfig.Middleware.Traces
	24, // 40: config.v1.ServiceConfig.Middleware.logger:type_name -> config.v1.ServiceConfig.Middleware.Logger
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_config_v1_service_proto_init() }
func file_config_v1_service_proto_init() {
	if File_config_v1_service_proto != nil {
		return
	}
	file_config_v1_service_proto_msgTypes[16].OneofWrappers = []any{}
	file_config_v1_service_proto_msgTypes[17].OneofWrappers = []any{}
	file_config_v1_service_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_v1_service_proto_goTypes,
		DependencyIndexes: file_config_v1_service_proto_depIdxs,
		MessageInfos:      file_config_v1_service_proto_msgTypes,
	}.Build()
	File_config_v1_service_proto = out.File
	file_config_v1_service_proto_rawDesc = nil
	file_config_v1_service_proto_goTypes = nil
	file_config_v1_service_proto_depIdxs = nil
}
