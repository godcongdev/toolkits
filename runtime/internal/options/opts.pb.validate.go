// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: options/opts.proto

package ent

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Schema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SchemaMultiError, or nil if none found.
func (m *Schema) ValidateAll() error {
	return m.validate(true)
}

func (m *Schema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Gen

	// no validation rules for Name

	if len(errors) > 0 {
		return SchemaMultiError(errors)
	}

	return nil
}

// SchemaMultiError is an error wrapping multiple validation errors returned by
// Schema.ValidateAll() if the designated constraints aren't met.
type SchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaMultiError) AllErrors() []error { return m }

// SchemaValidationError is the validation error returned by Schema.Validate if
// the designated constraints aren't met.
type SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaValidationError) ErrorName() string { return "SchemaValidationError" }

// Error satisfies the builtin error interface
func (e SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaValidationError{}

// Validate checks the field values on Field with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Field) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Field with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FieldMultiError, or nil if none found.
func (m *Field) ValidateAll() error {
	return m.validate(true)
}

func (m *Field) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Optional

	// no validation rules for Nillable

	// no validation rules for Unique

	// no validation rules for Sensitive

	// no validation rules for Immutable

	// no validation rules for Comment

	// no validation rules for StructTag

	// no validation rules for StorageKey

	// no validation rules for SchemaType

	if len(errors) > 0 {
		return FieldMultiError(errors)
	}

	return nil
}

// FieldMultiError is an error wrapping multiple validation errors returned by
// Field.ValidateAll() if the designated constraints aren't met.
type FieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FieldMultiError) AllErrors() []error { return m }

// FieldValidationError is the validation error returned by Field.Validate if
// the designated constraints aren't met.
type FieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FieldValidationError) ErrorName() string { return "FieldValidationError" }

// Error satisfies the builtin error interface
func (e FieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FieldValidationError{}

// Validate checks the field values on Edge with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Edge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Edge with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EdgeMultiError, or nil if none found.
func (m *Edge) ValidateAll() error {
	return m.validate(true)
}

func (m *Edge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Unique

	// no validation rules for Ref

	// no validation rules for Required

	// no validation rules for Field

	if all {
		switch v := interface{}(m.GetStorageKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EdgeValidationError{
					field:  "StorageKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EdgeValidationError{
					field:  "StorageKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorageKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EdgeValidationError{
				field:  "StorageKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StructTag

	if len(errors) > 0 {
		return EdgeMultiError(errors)
	}

	return nil
}

// EdgeMultiError is an error wrapping multiple validation errors returned by
// Edge.ValidateAll() if the designated constraints aren't met.
type EdgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EdgeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EdgeMultiError) AllErrors() []error { return m }

// EdgeValidationError is the validation error returned by Edge.Validate if the
// designated constraints aren't met.
type EdgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EdgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EdgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EdgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EdgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EdgeValidationError) ErrorName() string { return "EdgeValidationError" }

// Error satisfies the builtin error interface
func (e EdgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEdge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EdgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EdgeValidationError{}

// Validate checks the field values on Edge_StorageKey with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Edge_StorageKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Edge_StorageKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Edge_StorageKeyMultiError, or nil if none found.
func (m *Edge_StorageKey) ValidateAll() error {
	return m.validate(true)
}

func (m *Edge_StorageKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Table

	if len(errors) > 0 {
		return Edge_StorageKeyMultiError(errors)
	}

	return nil
}

// Edge_StorageKeyMultiError is an error wrapping multiple validation errors
// returned by Edge_StorageKey.ValidateAll() if the designated constraints
// aren't met.
type Edge_StorageKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Edge_StorageKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Edge_StorageKeyMultiError) AllErrors() []error { return m }

// Edge_StorageKeyValidationError is the validation error returned by
// Edge_StorageKey.Validate if the designated constraints aren't met.
type Edge_StorageKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Edge_StorageKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Edge_StorageKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Edge_StorageKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Edge_StorageKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Edge_StorageKeyValidationError) ErrorName() string { return "Edge_StorageKeyValidationError" }

// Error satisfies the builtin error interface
func (e Edge_StorageKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEdge_StorageKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Edge_StorageKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Edge_StorageKeyValidationError{}
